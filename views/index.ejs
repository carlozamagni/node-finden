<div id="map" style="top:0; bottom:0; left:0; right:0; position:absolute;"></div>

<div id="settings"> 

  <div id="toggle-edit">Toggle</div>
  <div id="save-region">Save</div>
  <div id="log"></div>

</div>

<script src="Leaflet/dist/leaflet.js"></script>

<script type="text/javascript"> 
  
  /** Converts numeric degrees to radians */
  if (typeof(Number.prototype.toRad) === "undefined") {
    Number.prototype.toRad = function() {
      return this * Math.PI / 180;
    }
  }
  
  /** Converts numeric degrees to radians */
  if (typeof(Number.prototype.toDeg) === "undefined") {
    Number.prototype.toDeg = function() {
      var d = 360/(2*Math.PI);
      return this * d;
    }
  }
  
  var io = io.connect();
  
  $(function() {
    var cloudmadeUrl = 'http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png', 
    cloudmadeAttribution = '',
    cloudmade = new L.TileLayer(cloudmadeUrl, {
      maxZoom: 18, 
      attribution: cloudmadeAttribution
    }),
    calculate = {
      distance: function( point1, point2 ){
        var lat1 = point1[0], lat2 = point2[0], lon1 = point1[1], lon2 = point2[1],
            R = 6371, 
            dLat = (lat2-lat1).toRad(), dLon = (lon2-lon1).toRad(),
            lat1 = lat1.toRad(), lat2 = lat2.toRad(),
            a = Math.sin(dLat/2) * Math.sin(dLat/2) + 
                Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2),
            c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)),
            d = R * c;
        return d
      }
    },
    user = {
      _e: false, _h: [],
      isTraveling: function(){
       return this._h.length > 0 ? true : false
      },
      toggleEdit: function(){
        this._e = !this._e
      },
      canEdit: function(){
        return this._e
      },
      record: function( p ){
        this._h.push( p )
      },
      clearHistory: function(){
        this._h = []
      },
      getHistoryByOffset: function( offset ){
        return this._h[this._h.length - offset] ? this._h[this._h.length - offset] : null
      },
      getHistory: function(){
        return this._h
      },
      getHistoryByIndex: function( index ){
        return this._h[index] ? this._h[index] : null
      },
      log: function( d ){
        $('#log').text( d )
      }
    },
    map = new L.Map('map'),
    pos = new L.LatLng(40.770012,-73.973694);
		map.setView(pos, 13).addLayer(cloudmade);
		
    map.addCircle = function( lat, lng, r ){
      var latlng = new L.LatLng(lat, lng), 
          circle = new L.CircleMarker(latlng, {
            stroke: true,
            radius: r
          });
      this.addLayer( circle );
      return circle
    }
    
    map.addPolyline = function( s, e ){
      var polyline = new L.Polyline([new L.LatLng(s.lat,s.lng),new L.LatLng(e.lat, e.lng)],{color: 'blue'});
      this.addLayer(polyline)
      return polyline
    }
    
    map.addPolygon = function( p ){
      console.log('add polygon')
      console.log( p )
      var polygon = new L.Polygon(p, {color: 'blue'} );
      this.addLayer(polygon)
    }
    
    map.on('click', function (e) {
      if(user.canEdit()){
        var circle = this.addCircle(e.latlng.lat, e.latlng.lng, 10)
        if(user.isTraveling()){
          user.record({
            "lat" : e.latlng.lat, 
            "lng" : e.latlng.lng,
            "circle" : circle 
          })
          var polyline = this.addPolyline( user.getHistoryByOffset(2), user.getHistoryByOffset(1) )
          user.getHistoryByOffset(1).polyline = polyline
        }else{
          user.record({
            "lat" : e.latlng.lat, 
            "lng" : e.latlng.lng,
            "circle" : circle 
          })
        }
      }
    });
    
    /* connect to the server */
    io.on('mapTweet', function ( tweet ){
      if( tweet.geo ){
        var markerLocation = pos,
            marker = new L.Marker(markerLocation),
    		    pos = new L.LatLng(tweet.geo.coordinates[0],tweet.geo.coordinates[1])  
        map.addLayer(marker);
      }
    });
    
    //click handlers
    $('#toggle-edit').click(function(){
      user.toggleEdit()
    })
    
    $('#save-region').click(function(){
      var history = user.getHistory(),
          polyPoints = [];
      $.each(history, function(i, p) {
       
        
        polyPoints.push(new L.LatLng(p.lat, p.lng)) 
        
        if( i >= history.length -1 ){
          map.addPolygon(polyPoints)
        }
      });
    })
    
  });
</script>  